name: Release

on:
  push:
    tags:
      - 'v*'

env:
  GO_VERSION: '1.23'

jobs:
  build:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux builds - native compilation for CGO/Fyne
          - os: ubuntu-latest
            goos: linux
            goarch: amd64
            artifact_name: shario-linux-amd64
            asset_name: shario-linux-amd64
          
          # Windows builds - native compilation for CGO/Fyne  
          - os: windows-latest
            goos: windows
            goarch: amd64
            artifact_name: shario-windows-amd64.exe
            asset_name: shario-windows-amd64.exe
            
          # macOS builds - native compilation for CGO/Fyne
          - os: macos-latest
            goos: darwin
            goarch: amd64
            artifact_name: shario-darwin-amd64
            asset_name: shario-darwin-amd64
            
          - os: macos-13  # Intel runner for amd64
            goos: darwin
            goarch: amd64
            artifact_name: shario-darwin-amd64-intel
            asset_name: shario-darwin-amd64-intel

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      # Platform-specific system dependencies
      - name: Install Linux dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc pkg-config libgl1-mesa-dev libxcursor-dev libxrandr-dev libxinerama-dev libxi-dev libxxf86vm-dev libasound2-dev

      - name: Install macOS dependencies
        if: startsWith(matrix.os, 'macos')
        run: |
          # macOS dependencies should be available by default
          xcode-select --version || xcode-select --install

      - name: Set up Windows environment
        if: matrix.os == 'windows-latest'
        run: |
          # Windows should have required tools by default with Go 1.23+
          echo "Windows environment ready"
          go env

      # Get version from tag
      - name: Get version
        id: version
        shell: bash
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "Building version: $VERSION"

      # Ensure dependencies are ready
      - name: Download dependencies
        run: |
          go mod download
          go mod verify

      # Format code to prevent CI failures (Tala doesn't need this, but we do due to different toolchains)
      - name: Format code
        run: go fmt ./...

      # Build binary
      - name: Build binary
        env:
          CGO_ENABLED: 1
        shell: bash
        run: |
          echo "Building ${{ matrix.artifact_name }} for ${{ matrix.goos }}/${{ matrix.goarch }}"
          echo "Go version: $(go version)"
          echo "Environment: GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} CGO_ENABLED=1"
          
          # Build with optimizations (similar to Tala but with CGO)
          go build -v \
            -trimpath \
            -ldflags="-s -w -X main.version=${{ steps.version.outputs.VERSION }}" \
            -o ${{ matrix.artifact_name }} \
            .
          
          echo "Build completed successfully"
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            powershell -command "Get-Item ${{ matrix.artifact_name }} | Select-Object Name, Length"
          else
            ls -la ${{ matrix.artifact_name }}
          fi

      # Create platform-specific archives (following Tala's approach)
      - name: Create archive
        shell: bash
        run: |
          VERSION=${{ steps.version.outputs.VERSION }}
          
          if [[ "${{ matrix.goos }}" == "windows" ]]; then
            # Windows: create zip
            if command -v powershell &> /dev/null; then
              powershell -command "Compress-Archive -Path '${{ matrix.artifact_name }}' -DestinationPath '${{ matrix.asset_name }}-$VERSION.zip'"
            else
              zip "${{ matrix.asset_name }}-$VERSION.zip" "${{ matrix.artifact_name }}"
            fi
            echo "ASSET_PATH=${{ matrix.asset_name }}-$VERSION.zip" >> $GITHUB_ENV
          else
            # Unix: create tar.gz
            tar -czf "${{ matrix.asset_name }}-$VERSION.tar.gz" "${{ matrix.artifact_name }}"
            echo "ASSET_PATH=${{ matrix.asset_name }}-$VERSION.tar.gz" >> $GITHUB_ENV
          fi

      # Upload artifacts
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}-${{ steps.version.outputs.VERSION }}
          path: ${{ env.ASSET_PATH }}
          retention-days: 30

  # Create GitHub release (simplified approach like Tala)
  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Get version
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          find artifacts -name "*.zip" -o -name "*.tar.gz" | xargs -I {} cp {} release-assets/
          ls -la release-assets/

      - name: Generate release notes
        id: release_notes
        run: |
          VERSION=${{ steps.version.outputs.VERSION }}
          cat > release_notes.md << EOF
          # Shario $VERSION
          
          Cross-platform P2P file sharing application with real-time chat.
          
          ## Download
          
          Choose the appropriate binary for your platform:
          
          - **Windows (x64)**: \`shario-windows-amd64-$VERSION.zip\`
          - **Linux (x64)**: \`shario-linux-amd64-$VERSION.tar.gz\`  
          - **macOS (Intel)**: \`shario-darwin-amd64-$VERSION.tar.gz\`
          - **macOS (Apple Silicon)**: \`shario-darwin-amd64-intel-$VERSION.tar.gz\`
          
          ## Installation
          
          1. Download the appropriate archive for your platform
          2. Extract the archive
          3. Run the \`shario\` executable
          
          ## Features
          
          - P2P file sharing with progress tracking
          - Real-time chat with connected peers
          - Automatic peer discovery (local network + internet)
          - Cross-platform GUI built with Fyne
          - Secure encrypted communication
          
          ---
          
          **Built with Go ${{ env.GO_VERSION }}** | **Release**: $(date -u +'%Y-%m-%d %H:%M:%S UTC')
          EOF

      - name: Create release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.VERSION }}
          name: Shario ${{ steps.version.outputs.VERSION }}
          body_path: release_notes.md
          draft: false
          prerelease: ${{ contains(steps.version.outputs.VERSION, 'rc') }}
          files: release-assets/*
          fail_on_unmatched_files: false
          make_latest: ${{ !contains(steps.version.outputs.VERSION, 'rc') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}