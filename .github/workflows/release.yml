name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            goos: linux
            goarch: amd64
            binary_suffix: ''
            archive_type: tar.gz
            cgo_enabled: "1"
          - os: windows-latest
            goos: windows
            goarch: amd64
            binary_suffix: .exe
            archive_type: zip
            cgo_enabled: "1"
          - os: macos-latest
            goos: darwin
            goarch: amd64
            binary_suffix: ''
            archive_type: tar.gz
            cgo_enabled: "1"
          - os: macos-latest
            goos: darwin
            goarch: arm64
            binary_suffix: ''
            archive_type: tar.gz
            cgo_enabled: "1"

    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23'

    # Install system dependencies for Fyne on Ubuntu
    - name: Install Linux dependencies
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc pkg-config libgl1-mesa-dev libxcursor-dev libxrandr-dev libxinerama-dev libxi-dev libxxf86vm-dev libasound2-dev

    # Install Xcode Command Line Tools on macOS  
    - name: Install macOS dependencies
      if: matrix.os == 'macos-latest'
      run: |
        xcode-select --version || xcode-select --install

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-1.23-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-1.23-

    - name: Download dependencies
      run: go mod download

    - name: Get version
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: ${{ matrix.cgo_enabled }}
      shell: bash
      run: |
        mkdir -p dist
        BINARY_NAME=shario-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.binary_suffix }}
        echo "Building for ${{ matrix.goos }}/${{ matrix.goarch }} with CGO_ENABLED=${{ matrix.cgo_enabled }}"
        go build -ldflags="-s -w -X main.version=${{ steps.get_version.outputs.VERSION }}" -o dist/$BINARY_NAME .

    - name: Create archive (Windows)
      if: matrix.archive_type == 'zip'
      shell: pwsh
      run: |
        cd dist
        $BINARY_NAME = "shario-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.binary_suffix }}"
        $ARCHIVE_NAME = "shario-${{ steps.get_version.outputs.VERSION }}-${{ matrix.goos }}-${{ matrix.goarch }}.zip"
        Compress-Archive -Path $BINARY_NAME -DestinationPath $ARCHIVE_NAME

    - name: Create archive (Unix)
      if: matrix.archive_type == 'tar.gz'
      shell: bash
      run: |
        cd dist
        BINARY_NAME=shario-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.binary_suffix }}
        ARCHIVE_NAME=shario-${{ steps.get_version.outputs.VERSION }}-${{ matrix.goos }}-${{ matrix.goarch }}.tar.gz
        tar -czf $ARCHIVE_NAME $BINARY_NAME

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: shario-${{ matrix.goos }}-${{ matrix.goarch }}
        path: dist/shario-${{ steps.get_version.outputs.VERSION }}-${{ matrix.goos }}-${{ matrix.goarch }}.*

  # Create installers for different platforms
  create-installers:
    needs: build
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: dist/

    - name: Get version
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

    # Create DEB package for Ubuntu/Debian
    - name: Create DEB package
      run: |
        VERSION=${{ steps.get_version.outputs.VERSION }}
        VERSION_NUM=${VERSION#v}
        
        # Create package structure
        mkdir -p shario_${VERSION_NUM}/DEBIAN
        mkdir -p shario_${VERSION_NUM}/usr/bin
        mkdir -p shario_${VERSION_NUM}/usr/share/applications
        mkdir -p shario_${VERSION_NUM}/usr/share/pixmaps
        
        # Copy binary
        cp dist/shario-linux-amd64/shario-${VERSION}-linux-amd64.tar.gz .
        tar -xzf shario-${VERSION}-linux-amd64.tar.gz
        cp shario-linux-amd64 shario_${VERSION_NUM}/usr/bin/shario
        chmod +x shario_${VERSION_NUM}/usr/bin/shario
        
        # Create desktop entry
        cat > shario_${VERSION_NUM}/usr/share/applications/shario.desktop << EOF
        [Desktop Entry]
        Name=Shario
        Comment=P2P File Sharing Application
        Exec=shario
        Icon=shario
        Terminal=false
        Type=Application
        Categories=Network;FileTransfer;
        EOF
        
        # Create control file
        cat > shario_${VERSION_NUM}/DEBIAN/control << EOF
        Package: shario
        Version: ${VERSION_NUM}
        Section: net
        Priority: optional
        Architecture: amd64
        Depends: libgl1-mesa-glx, libxcursor1, libxrandr2, libxinerama1, libxi6, libxxf86vm1, libasound2
        Maintainer: Shario Team <team@shario.dev>
        Description: P2P File Sharing Application
         Shario is a cross-platform peer-to-peer file sharing application
         with real-time chat capabilities. Built with Go, libp2p, and Fyne.
        EOF
        
        # Build package
        dpkg-deb --build shario_${VERSION_NUM}
        mv shario_${VERSION_NUM}.deb shario-${VERSION}-linux-amd64.deb

    # Create RPM package for CentOS/RHEL/Fedora
    - name: Create RPM package
      run: |
        VERSION=${{ steps.get_version.outputs.VERSION }}
        VERSION_NUM=${VERSION#v}
        
        # Convert version for RPM (replace hyphens with dots for rc versions)
        # e.g., 1.0.0-rc.1 becomes 1.0.0.rc.1 for RPM compatibility
        RPM_VERSION=$(echo "$VERSION_NUM" | sed 's/-/./g')
        
        # Install rpm build tools
        sudo apt-get update
        sudo apt-get install -y rpm
        
        # Create RPM build structure
        mkdir -p ~/rpmbuild/{BUILD,RPMS,SOURCES,SPECS,SRPMS}
        
        # Copy binary to sources
        cp dist/shario-linux-amd64/shario-${VERSION}-linux-amd64.tar.gz ~/rpmbuild/SOURCES/
        
        # Create spec file
        cat > ~/rpmbuild/SPECS/shario.spec << 'SPEC_EOF'
        Name: shario
        Version: RPM_VERSION_PLACEHOLDER
        Release: 1%{?dist}
        Summary: P2P File Sharing Application
        License: MIT
        URL: https://github.com/domykasas/shario
        Source0: shario-VERSION_TAG_PLACEHOLDER-linux-amd64.tar.gz
        
        # No BuildRequires needed for pre-built binary
        Requires: mesa-libGL libXcursor libXrandr libXinerama libXi libXxf86vm alsa-lib
        
        # Disable automatic dependency detection since we're packaging a pre-built Go binary
        AutoReqProv: no
        
        %description
        Shario is a cross-platform peer-to-peer file sharing application
        with real-time chat capabilities. Built with Go, libp2p, and Fyne.
        
        %prep
        %setup -q -c
        
        %build
        # Binary is pre-built, no compilation needed
        
        %install
        mkdir -p %{buildroot}/usr/bin
        mkdir -p %{buildroot}/usr/share/applications
        
        # Install the binary
        install -m 755 shario-linux-amd64 %{buildroot}/usr/bin/shario
        
        # Install desktop file
        cat > %{buildroot}/usr/share/applications/shario.desktop << 'DESKTOP_EOF'
        [Desktop Entry]
        Name=Shario
        Comment=P2P File Sharing Application
        Exec=shario
        Icon=shario
        Terminal=false
        Type=Application
        Categories=Network;FileTransfer;
        DESKTOP_EOF
        
        %files
        %attr(755,root,root) /usr/bin/shario
        /usr/share/applications/shario.desktop
        
        %changelog
        * DATE_PLACEHOLDER Shario Team <team@shario.dev> - RPM_VERSION_PLACEHOLDER-1
        - Release VERSION_TAG_PLACEHOLDER
        SPEC_EOF
        
        # Replace placeholders in spec file
        sed -i "s/RPM_VERSION_PLACEHOLDER/${RPM_VERSION}/g" ~/rpmbuild/SPECS/shario.spec
        sed -i "s/VERSION_TAG_PLACEHOLDER/${VERSION}/g" ~/rpmbuild/SPECS/shario.spec
        sed -i "s/DATE_PLACEHOLDER/$(date +'%a %b %d %Y')/g" ~/rpmbuild/SPECS/shario.spec
        
        # Build RPM
        cd ~/rpmbuild/SOURCES
        tar -xzf shario-${VERSION}-linux-amd64.tar.gz
        rpmbuild -bb ~/rpmbuild/SPECS/shario.spec
        
        # Copy result (use RPM version format in filename)
        cp ~/rpmbuild/RPMS/x86_64/shario-${RPM_VERSION}-1.*.rpm $GITHUB_WORKSPACE/shario-${VERSION}-linux-amd64.rpm

    # Create macOS DMG
    - name: Create macOS DMG
      run: |
        VERSION=${{ steps.get_version.outputs.VERSION }}
        
        # For now, just rename the tar.gz as we'd need macOS to create proper DMG
        if [ -f "dist/shario-darwin-amd64/shario-${VERSION}-darwin-amd64.tar.gz" ]; then
          cp dist/shario-darwin-amd64/shario-${VERSION}-darwin-amd64.tar.gz shario-${VERSION}-darwin-amd64.tar.gz
        fi
        if [ -f "dist/shario-darwin-arm64/shario-${VERSION}-darwin-arm64.tar.gz" ]; then
          cp dist/shario-darwin-arm64/shario-${VERSION}-darwin-arm64.tar.gz shario-${VERSION}-darwin-arm64.tar.gz
        fi

    - name: Upload installer artifacts
      uses: actions/upload-artifact@v4
      with:
        name: installers
        path: |
          *.deb
          *.rpm
          *.tar.gz

  # Create GitHub release
  release:
    needs: [build, create-installers]
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: read
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts/

    - name: Get version
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

    - name: Generate changelog
      id: changelog
      run: |
        VERSION=${{ steps.get_version.outputs.VERSION }}
        
        # Extract changelog section for this version
        if [ -f CHANGELOG.md ]; then
          # Find the section for this version
          awk "/^## \[${VERSION#v}\]/{p=1} /^## \[.*\]/{if(p && !/^## \[${VERSION#v}\]/) exit} p" CHANGELOG.md > release_notes.md
          
          # If no specific version found, use unreleased section
          if [ ! -s release_notes.md ]; then
            awk '/^## \[Unreleased\]/{p=1} /^## \[.*\]/{if(p && !/^## \[Unreleased\]/) exit} p' CHANGELOG.md > release_notes.md
          fi
          
          # Clean up the version header
          sed -i '1d' release_notes.md
        else
          echo "Release $VERSION" > release_notes.md
          echo "" >> release_notes.md
          echo "Automatic release created by GitHub Actions." >> release_notes.md
        fi
        
        # Add build information
        echo "" >> release_notes.md
        echo "## Download" >> release_notes.md
        echo "" >> release_notes.md
        echo "### Binaries" >> release_notes.md
        echo "- **Linux (amd64)**: \`shario-${VERSION}-linux-amd64.tar.gz\`" >> release_notes.md
        echo "- **Windows (amd64)**: \`shario-${VERSION}-windows-amd64.zip\`" >> release_notes.md
        echo "- **macOS (amd64)**: \`shario-${VERSION}-darwin-amd64.tar.gz\`" >> release_notes.md
        echo "- **macOS (arm64)**: \`shario-${VERSION}-darwin-arm64.tar.gz\`" >> release_notes.md
        echo "" >> release_notes.md
        echo "### Packages" >> release_notes.md
        echo "- **Debian/Ubuntu**: \`shario-${VERSION}-linux-amd64.deb\`" >> release_notes.md
        echo "- **CentOS/RHEL/Fedora**: \`shario-${VERSION}-linux-amd64.rpm\`" >> release_notes.md

    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.get_version.outputs.VERSION }}
        name: Shario ${{ steps.get_version.outputs.VERSION }}
        body_path: release_notes.md
        draft: false
        prerelease: ${{ contains(steps.get_version.outputs.VERSION, 'rc') }}
        files: |
          artifacts/shario-*/shario-${{ steps.get_version.outputs.VERSION }}-*
          artifacts/installers/*
        token: ${{ secrets.GITHUB_TOKEN }}

