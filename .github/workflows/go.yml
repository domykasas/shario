name: Go

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        go-version: [1.21, 1.22, 1.23]
        
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go-version }}

    # Install system dependencies for Fyne on Ubuntu
    - name: Install Linux dependencies
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc pkg-config libgl1-mesa-dev libxcursor-dev libxrandr-dev libxinerama-dev libxi-dev libxxf86vm-dev libasound2-dev

    # Install Xcode Command Line Tools on macOS
    - name: Install macOS dependencies
      if: matrix.os == 'macos-latest'
      run: |
        # Check if Xcode CLI tools are installed
        xcode-select --version || xcode-select --install

    # Set up Windows dependencies (Go 1.21+ includes CGO support)
    - name: Setup Windows dependencies
      if: matrix.os == 'windows-latest'
      run: |
        # Windows runner should have GCC available
        gcc --version

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ matrix.go-version }}-

    - name: Download dependencies
      run: go mod download

    - name: Verify dependencies
      run: go mod verify

    - name: Build
      run: go build -v ./...

    - name: Run tests
      run: go test -v ./...

    - name: Run tests with race detector
      run: go test -race -v ./...

    - name: Run static analysis
      run: go vet ./...

    # Run staticcheck for additional static analysis
    - name: Install staticcheck
      run: go install honnef.co/go/tools/cmd/staticcheck@latest

    - name: Run staticcheck
      run: staticcheck ./...

    # Check code formatting
    - name: Check formatting
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "Code is not formatted. Please run 'go fmt ./...'"
          gofmt -s -l .
          exit 1
        fi
      shell: bash

    # Run golint for style checking
    - name: Install golint
      run: go install golang.org/x/lint/golint@latest

    - name: Run golint
      run: golint ./...

    # Test build for different architectures
    - name: Test cross-compilation
      run: |
        GOOS=linux GOARCH=amd64 go build -o shario-linux-amd64 .
        GOOS=windows GOARCH=amd64 go build -o shario-windows-amd64.exe .
        GOOS=darwin GOARCH=amd64 go build -o shario-darwin-amd64 .
        GOOS=darwin GOARCH=arm64 go build -o shario-darwin-arm64 .

    # Generate test coverage report
    - name: Generate coverage report
      run: go test -coverprofile=coverage.out ./...

    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.go-version == '1.23'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false