name: Go

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  GO_VERSION: '1.23'

jobs:
  test:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    # Platform-specific system dependencies (only for Linux, simplified)
    - name: Install Linux dependencies  
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc pkg-config libgl1-mesa-dev libxcursor-dev libxrandr-dev libxinerama-dev libxi-dev libxxf86vm-dev libasound2-dev

    - name: Install macOS dependencies
      if: matrix.os == 'macos-latest'
      run: |
        # Ensure Xcode command line tools are available
        xcode-select --version || xcode-select --install

    # Dependency management
    - name: Download dependencies
      run: |
        go mod download
        go mod verify

    # Code quality and formatting (following Tala's approach)
    - name: Format code
      run: go fmt ./...

    # Build test (ensure it compiles)
    - name: Build
      env:
        CGO_ENABLED: 1
      run: go build -v ./...

    # Run tests
    - name: Test
      env:
        CGO_ENABLED: 1
      run: go test -v ./...

    # Test with race detection (like Tala)
    - name: Test with race detector
      env:
        CGO_ENABLED: 1
      run: go test -race -v ./...

    # Static analysis
    - name: Vet
      run: go vet ./...

    # Install and run staticcheck (following Tala's pattern)
    - name: Install staticcheck
      run: go install honnef.co/go/tools/cmd/staticcheck@latest

    - name: Run staticcheck
      run: staticcheck ./...

    # Code coverage (like Tala, but only on Ubuntu with latest Go)
    - name: Generate test coverage
      if: matrix.os == 'ubuntu-latest'
      env:
        CGO_ENABLED: 1
      run: go test -coverprofile=coverage.out ./...

    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false